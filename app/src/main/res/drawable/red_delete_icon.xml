<vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="24dp"
        android:height="24dp"
        android:viewportWidth="24.0"
        android:viewportHeight="24.0">
    <path
        android:fillColor="#e23737"
        android:pathData="M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z"/>
</vector>


        <!--
        public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
        int position = viewHolder.getAdapterPosition();

        if (direction == ItemTouchHelper.LEFT){
        final Model deletedModel = imageModelArrayList.get(position);
        final int deletedPosition = position;
        adapter.removeItem(position);
        // showing snack bar with Undo option
        Snackbar snackbar = Snackbar.make(getWindow().getDecorView().getRootView(), " removed from Recyclerview!", Snackbar.LENGTH_LONG);
        snackbar.setAction("UNDO", new View.OnClickListener() {
        @Override
        public void onClick(View view) {
        // undo is selected, restore the deleted item
        adapter.restoreItem(deletedModel, deletedPosition);
        }
        });
        snackbar.setActionTextColor(Color.YELLOW);
        snackbar.show();
        } else {
        final Model deletedModel = imageModelArrayList.get(position);
        final int deletedPosition = position;
        adapter.removeItem(position);
        // showing snack bar with Undo option
        Snackbar snackbar = Snackbar.make(getWindow().getDecorView().getRootView(), " removed from Recyclerview!", Snackbar.LENGTH_LONG);
        snackbar.setAction("UNDO", new View.OnClickListener() {
        @Override
        public void onClick(View view) {

        // undo is selected, restore the deleted item
        adapter.restoreItem(deletedModel, deletedPosition);
        }
        });
        snackbar.setActionTextColor(Color.YELLOW);
        snackbar.show();
        }
        }

        @Override
        public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {

        Bitmap icon;
        if(actionState == ItemTouchHelper.ACTION_STATE_SWIPE){

        View itemView = viewHolder.itemView;
        float height = (float) itemView.getBottom() - (float) itemView.getTop();
        float width = height / 3;

        if(dX > 0){
        p.setColor(Color.parseColor("#388E3C"));
        RectF background = new RectF((float) itemView.getLeft(), (float) itemView.getTop(), dX,(float) itemView.getBottom());
        c.drawRect(background,p);
        icon = BitmapFactory.decodeResource(getResources(), R.drawable.delete);
        RectF icon_dest = new RectF((float) itemView.getLeft() + width ,(float) itemView.getTop() + width,(float) itemView.getLeft()+ 2*width,(float)itemView.getBottom() - width);
        c.drawBitmap(icon,null,icon_dest,p);
        } else {
        p.setColor(Color.parseColor("#D32F2F"));
        RectF background = new RectF((float) itemView.getRight() + dX, (float) itemView.getTop(),(float) itemView.getRight(), (float) itemView.getBottom());
        c.drawRect(background,p);
        icon = BitmapFactory.decodeResource(getResources(), R.drawable.delete);
        RectF icon_dest = new RectF((float) itemView.getRight() - 2*width ,(float) itemView.getTop() + width,(float) itemView.getRight() - width,(float)itemView.getBottom() - width);
        c.drawBitmap(icon,null,icon_dest,p);
        }
        }
        super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
        }
        };
        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleItemTouchCallback);
        itemTouchHelper.attachToRecyclerView(recyclerView);
        }

        private ArrayList<Model> populateList(){

ArrayList<Model> list = new ArrayList<>();

    for(int i = 0; i < 8; i++){
    Model imageModel = new Model();
    imageModel.setName(myImageNameList[i]);
    list.add(imageModel);
    }

    return list;-->
